name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'tests/**'
      - 'Makefile'
      - '.github/workflows/**'
      - 'CLAUDE.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'include/**'
      - 'tests/**'
      - 'Makefile'
      - '.github/workflows/**'
      - 'CLAUDE.md'

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Xcode command line tools should already be available
        which gcc || which clang
        which make
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          make
    
    - name: Clean any existing build artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: make clean || true
      shell: bash
    
    - name: Clean any existing build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: make clean || true
      shell: msys2 {0}
    
    - name: Build project (Unix)
      if: matrix.os != 'windows-latest'
      run: make all
      shell: bash
    
    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      run: make all
      shell: msys2 {0}
    
    - name: Run tests (Unix)
      if: matrix.os != 'windows-latest'
      run: make test
      shell: bash
    
    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      run: make test
      shell: msys2 {0}
    
    - name: Check if binary runs (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        timeout 5s ./binary_clock || [ $? -eq 124 ] || [ $? -eq 142 ]
        echo "Binary clock runs successfully!"
    
    - name: Check if binary runs (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Start binary_clock in background and kill after 5 seconds
        ./binary_clock &
        CLOCK_PID=$!
        sleep 5
        kill $CLOCK_PID 2>/dev/null || true
        wait $CLOCK_PID 2>/dev/null || true
        echo "Binary clock runs successfully!"
    
    - name: Check if binary runs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Start binary_clock in background and kill after 5 seconds
        ./binary_clock.exe &
        CLOCK_PID=$!
        sleep 5
        kill $CLOCK_PID 2>/dev/null || true
        wait $CLOCK_PID 2>/dev/null || true
        echo "Binary clock runs successfully!"
      shell: msys2 {0}
    
    - name: Clean build artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: make clean
      shell: bash
    
    - name: Clean build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: make clean
      shell: msys2 {0}